'use strict';
var path = require('path');
var mySource = require('../store/mongo');
var fs = require('fs');
var arayFile = [];
var arayFileCntr = -1;
var db;

mySource.connect(null, function(err, DB) {
    db = DB;
    if(err) {
        console.error("***************************\nMongo DB connection failed\n" + err.message + "\n***************************\n");
        process.exit();
    }
});


var saveFile = function(req, res, collection, item, folder, parentFolder, pathToFile, culmativeFolder) {
    var options = {encoding: 'utf8'};
    var content = fs.readFileSync(pathToFile, options);
    var doc = JSON.parse(content);
    //Use the folder value from the text file instead of the culmativeFolder which was generated by this file-imports.js source file.
    //doc.folder = culmativeFolder;

    collection.insert(doc, function(err, records) {
        if(err) {
            console.error("ERROR : " + err);
        } else {
            console.log("Record added as " + records.insertedIds[0].id);
        }
    });

};

var processFolder = function(req, res, collection, folder, parentFolder, culmativeFolder) {
   // console.log("****************** Reading folder: " + folder.toUpperCase() + " ******************");
    var list = fs.readdirSync(folder);
    var stat = null;
    var i;
    var item;
    var lastItem = list.length - 1;
    var fullPath;

    for(i=0; i<list.length; i++) {
        item = list[i];
        arayFile[++arayFileCntr] = item;
        fullPath = folder + path.sep + item;
        stat = fs.statSync(fullPath);
        if(stat.isFile()) {
            //console.log(item + " is a file");
            saveFile(req, res, collection, item, folder, parentFolder, fullPath, culmativeFolder);

        } else {
            //console.log(item + " is a FOLDER");
            processFolder(req, res, collection, folder + path.sep + item, item, culmativeFolder + "." + item);
        }
        if((parentFolder == null) && (i == lastItem)) {
            res.jsonp(arayFile);
        }
    }
}

var replaceAll = function(str, findStr, replaceStr) {
    return str.replace( new RegExp(findStr,"g"), replaceStr);
}


var extractCollection = function(aPath) {
    var pos = aPath.lastIndexOf(path.sep);
    var collection = (pos > -1) ? aPath.substring(pos + 1) : aPath;
    collection = replaceAll(collection, "_", " ");
    return collection;
}

exports.import = function(req, res) {
    var folder = req.query.folder;
    if(!folder) {
        return res.jsonp({errMsg: "folder parameter is missing"});
    }
    var collectionName = extractCollection(folder);
    //Since we are processing the first folder, we need to get the collection
    db.collection(collectionName, function(err, collection) {
        if(err != null) {
            res.jsonp({'errMsg' : err});
            return;
        }
        processFolder(req, res, collection, folder, null, collectionName);
    }.bind(this));
};